
# Health Event Notification System — Architecture & Workflow Overview

**Last Updated:** July 15, 2025

## 🔍 Summary

This system is designed to capture critical health events (e.g., abnormal vitals) and trigger an automated email alert using Temporal workflows. The application provides a secure, authenticated FastAPI endpoint (`/send_event`) that accepts structured health event data and initiates an email notification workflow in Temporal. JWT-based authentication is enforced for secure API access.

## 🗂️ Directory Structure

```
health_event_api/
├── api.py                     # FastAPI server handling health event endpoint and JWT auth
├── temporal_client.py        # Initializes and returns a Temporal client
├── workflows/
│   └── email_workflow.py     # Temporal workflow definition to send email via an activity
├── utils/
│   └── email_utils.py        # (Assumed) Utility for sending emails (SMTP or service)
├── .env                      # Contains secrets like JWT_SECRET
└── requirements.txt          # All Python dependencies
```

## 🧠 Architecture Overview

### Components

1. **FastAPI (api.py)**
    - Defines `/send_event` endpoint.
    - Parses and validates JSON input using Pydantic.
    - Verifies JWT using HTTP Bearer authentication.
    - Starts the Temporal workflow by calling `client.start_workflow`.

2. **Temporal Workflow (email_workflow.py)**
    - `EmailWorkflow` defines the run function.
    - It invokes an activity function `send_email_activity`.
    - This function generates an email using event payload details and calls a utility function (`send_email`).

3. **Temporal Client (temporal_client.py)**
    - Connects to Temporal Cloud or local server using namespace and task queue.
    - Provides an async client interface to the FastAPI route.

4. **JWT Authentication**
    - The token is passed in Swagger UI or curl via `Authorization: Bearer <token>`.
    - The secret is loaded from `.env` using `os.getenv("JWT_SECRET")`.
    - Token decoding is done using `jwt.decode(token, secret, algorithms=["HS256"])`.

5. **Swagger UI (Autogenerated)**
    - Automatically documents API.
    - Supports Bearer token input.
    - Shows curl request and response previews.

## 🔐 Authentication Flow

1. Client sends request to `/send_event` with `Authorization: Bearer <token>`.
2. Middleware calls `verify_token`, which decodes and validates the JWT.
3. If token is valid, the request is processed; otherwise, `401 Unauthorized` is returned.

## 🔁 Workflow Execution Flow

1. FastAPI receives event with fields like:
    ```json
    {
        "to_email": "tanisha@example.com",
        "event_type": "high_heart_rate",
        "user_id": "12345",
        "timestamp": "2025-07-15T14:00:00Z",
        "heart_rate": 140,
        "blood_pressure": "130/85"
    }
    ```

2. `client.start_workflow()` starts `EmailWorkflow`, passing this data as input.
3. `EmailWorkflow.run()` calls the `send_email_activity`.
4. `send_email_activity` formats the message and calls `send_email(...)`.
5. Email is sent out and workflow completes.

## 📦 How to Extend the System

- Add Slack or SMS notifications by creating new activities (e.g., `send_slack_activity`, `send_sms_activity`).
- Store health event logs in a database via a new activity.
- Add frontend dashboard to show workflow history/status (via Temporal APIs).
- Add monitoring or retry policies in workflow parameters.

## ✅ Deployment & Setup Guide

1. Create `.env` file:
    ```
    JWT_SECRET=your_secret_key_here
    ```

2. Install dependencies:
    ```
    pip install -r requirements.txt
    ```

3. Start FastAPI server:
    ```
    uvicorn api:app --reload
    ```

4. Run Swagger at `http://127.0.0.1:8000/docs`, input Bearer token, and test `/send_event`.

## 🧪 Testing

- Ensure token is valid (generate using same `JWT_SECRET`).
- Confirm email sends by checking console logs or inbox.
- Validate behavior using Temporal UI (e.g., https://cloud.temporal.io).

## 🧾 Final Thoughts

This is a well-modularized, secure, and production-scalable event-driven architecture. With Temporal orchestrating the logic and FastAPI securely exposing endpoints, this stack is highly extensible for various event-driven automation needs across health, finance, logistics, and more.
